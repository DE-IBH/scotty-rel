#!/usr/bin/perl

# scotty-rel - Scotty RELOADED Network Management Tool
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2012 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use Scotty::BackendConfig;
use Event;
use Scotty::Logging::Syslog;
use Proc::Daemon;
use IO::Socket;
use POSIX qw(mkfifo F_SETFL O_NONBLOCK);
use JSON;
use strict;
use warnings;

$SIG{CHLD} = 'IGNORE';

my $mypid = $$;
my @nodes = ();

$main::logger = Scotty::Logging::Syslog->new();
$main::logger->info("starting...");

sub WARN_handler {
    my($signal) = @_;

	if(defined $main::logger) {
		$main::logger->warning("WARNING: $signal");
	}
	else {
		printf STDERR "WARNING: $signal\n";
	}
}

sub DIE_handler {
    my($signal) = @_;

	if(defined $main::logger) {
		$main::logger->warning("ERROR: $signal");
	}
	else {
		printf STDERR "ERROR: $signal\n";
	}

	exit 1;
}

$SIG{__WARN__} = 'WARN_handler';
$SIG{__DIE__}  = 'DIE_handler';

END {
	if($mypid == $$) {
		my $m = "terminated (rc=$?)";
		if(defined $main::logger) {
			$main::logger->info($m);
		}
		else {
			print STDERR "$m\n";
		}
	}
}

#Proc::Daemon::Init;

my $UDS = "/tmp/scotty-rel";
unlink($UDS);
my $uds = IO::Socket::UNIX->new(
    Local  => $UDS,
    Type   => SOCK_STREAM,
    Listen => 5,
) or die $@;
$main::logger->info("listening on $UDS");

$uds->sockopt(F_SETFL, O_NONBLOCK);

Event->io(
	desc => 'uds',
	fd => $uds,
	poll => 'r',
	cb => \&accept_handler,
	repeat => '1',
);

my @clients;
sub accept_handler {
    my $event = shift;
    my $h = $event->w->fd;

    my $client = $uds->accept();
    return unless defined($client);

    $main::logger->info("incoming unix domain connection");
    print $client encode_json(Scotty::Sensor::getMap())."\n";

    push(@clients, $client);
}

sub sensor_data {
    my $event = shift;
    my $h = $event->w->fd;
    return if eof($h);

    my $l = <$h>;
    chomp($l);

    foreach my $client (@clients) {
	print $client "$l\n";
    }
}

&Scotty::BackendConfig::parse_config(shift);
&Scotty::Sensor::start_worker();

$main::logger->info("enter event loop");

Event::loop();
