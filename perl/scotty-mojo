#!/usr/bin/env perl

# scotty-rel - Scotty RELOADED Network Management Tool
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2012 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use Mojolicious::Lite;
use Mojo::IOLoop;;
use JSON;

get '/' => sub {
  my $self = shift;
  $self->render_static('index.html');
};

websocket '/ws' => sub {
    my $client = shift;
    my %backend;

    # increase timeout
    Mojo::IOLoop->stream($client->tx->connection)->timeout(300);

    $client->on(message => sub {
	    my ($client, $msg) = @_;
	    my $cid = "$client";

	    app->log->debug("client: $msg");
	    if($msg eq 'connect') {
		app->log->debug('connecting to backend');

		$backend{$cid} = Mojo::IOLoop->client({port => 1701} => sub {
		    my ($loop, $err, $stream) = @_;

		    if(defined($err)) {
			app->log->debug("backend failed: $err");
			$client->close();
		    }
		    else {
			$stream->on(error => sub {
			    my ($stream, $err) = @_;
			    app->log->debug("backend error: $err");
			    $client->close();
			});

			$stream->on(read => sub {
			    my($strea, $chunk) = @_;

			    if(exists($backend{$cid})) {
				$client->send($chunk);
			    }
			    else {
				$stream->close();
			    }
			});

			$stream->on(close => sub {
			    my ($stream) = @_;
			    app->log->debug("backend closed");
			    $client->finish() if(defined($client->tx));
			});
		    }
		});
	    }
	    else {
		app->log->debug('unknown command');
	    }
    });

    $client->on(finish => sub {
	my $client = shift;
	my $cid = "$client";

	if(exists($backend{$cid})) {
	    app->log->debug("client closed");
	    delete($backend{$cid});
	}
    });
};

app->start;
